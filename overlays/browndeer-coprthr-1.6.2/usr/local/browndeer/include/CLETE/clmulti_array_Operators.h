#ifndef _CLMULTI_ARRAY_OPERATORS_H
#define _CLMULTI_ARRAY_OPERATORS_H

///////////////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE WAS GENERATED AUTOMATICALLY!
// YOU SHOULD MODIFY THE INPUT FILES INSTEAD OF CHANGING THIS FILE DIRECTLY!
//
// THE FOLLOWING INPUT FILES WERE USED TO MAKE THIS FILE:
//
// gen_operators
// ./tools/CLETE_Ops.in
// ./tools/clmulti_array_Defs.in
//
///////////////////////////////////////////////////////////////////////////////


template<class T1>
inline typename MakeReturn<UnaryNode<FnArcCos,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
acos(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnArcCos,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcCos,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
acos(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnArcCos,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcCos,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
acos(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnArcCos,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcCos,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
acos(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnArcCos,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcSin,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
asin(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnArcSin,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcSin,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
asin(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnArcSin,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcSin,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
asin(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnArcSin,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcSin,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
asin(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnArcSin,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcTan,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
atan(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnArcTan,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcTan,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
atan(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnArcTan,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcTan,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
atan(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnArcTan,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcTan,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
atan(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnArcTan,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCeil,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
ceil(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnCeil,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCeil,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
ceil(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnCeil,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCeil,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
ceil(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnCeil,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCeil,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
ceil(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnCeil,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCos,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
cos(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnCos,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCos,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
cos(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnCos,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCos,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
cos(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnCos,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCos,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
cos(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnCos,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypCos,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
cosh(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnHypCos,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypCos,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
cosh(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnHypCos,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypCos,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
cosh(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnHypCos,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypCos,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
cosh(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnHypCos,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnExp,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
exp(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnExp,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnExp,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
exp(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnExp,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnExp,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
exp(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnExp,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnExp,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
exp(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnExp,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFabs,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
fabs(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnFabs,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFabs,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
fabs(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnFabs,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFabs,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
fabs(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnFabs,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFabs,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
fabs(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnFabs,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFloor,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
floor(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnFloor,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFloor,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
floor(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnFloor,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFloor,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
floor(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnFloor,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFloor,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
floor(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnFloor,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
log(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnLog,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
log(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnLog,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
log(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnLog,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
log(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnLog,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog10,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
log10(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnLog10,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog10,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
log10(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnLog10,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog10,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
log10(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnLog10,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog10,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
log10(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnLog10,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSin,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
sin(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnSin,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSin,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
sin(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnSin,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSin,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
sin(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnSin,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSin,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
sin(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnSin,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypSin,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
sinh(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnHypSin,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypSin,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
sinh(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnHypSin,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypSin,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
sinh(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnHypSin,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypSin,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
sinh(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnHypSin,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSqrt,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
sqrt(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnSqrt,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSqrt,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
sqrt(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnSqrt,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSqrt,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
sqrt(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnSqrt,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSqrt,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
sqrt(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnSqrt,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnTan,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
tan(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnTan,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnTan,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
tan(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnTan,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnTan,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
tan(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnTan,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnTan,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
tan(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnTan,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypTan,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
tanh(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<FnHypTan,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypTan,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
tanh(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<FnHypTan,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypTan,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
tanh(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<FnHypTan,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypTan,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
tanh(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<FnHypTan,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryMinus,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<OpUnaryMinus,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryMinus,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<OpUnaryMinus,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryMinus,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<OpUnaryMinus,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryMinus,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<OpUnaryMinus,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryPlus,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<OpUnaryPlus,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryPlus,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<OpUnaryPlus,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryPlus,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<OpUnaryPlus,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryPlus,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<OpUnaryPlus,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpBitwiseNot,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
operator~(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<OpBitwiseNot,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpBitwiseNot,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
operator~(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<OpBitwiseNot,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpBitwiseNot,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
operator~(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<OpBitwiseNot,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpBitwiseNot,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
operator~(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<OpBitwiseNot,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpIdentity,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
PETE_identity(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<OpIdentity,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpIdentity,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
PETE_identity(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<OpIdentity,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpIdentity,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
PETE_identity(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<OpIdentity,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpIdentity,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
PETE_identity(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<OpIdentity,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpNot,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> >::Expression_t
operator!(const clmulti_array<T1,1> & l)
{
  typedef UnaryNode<OpNot,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpNot,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> >::Expression_t
operator!(const clmulti_array<T1,2> & l)
{
  typedef UnaryNode<OpNot,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpNot,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> >::Expression_t
operator!(const clmulti_array<T1,3> & l)
{
  typedef UnaryNode<OpNot,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpNot,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> >::Expression_t
operator!(const clmulti_array<T1,4> & l)
{
  typedef UnaryNode<OpNot,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<UnaryNode<OpCast<T1>,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
peteCast(const T1&, const clmulti_array<T2,1> & l)
{
  typedef UnaryNode<OpCast<T1>,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T2,1> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<UnaryNode<OpCast<T1>,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
peteCast(const T1&, const clmulti_array<T2,2> & l)
{
  typedef UnaryNode<OpCast<T1>,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T2,2> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<UnaryNode<OpCast<T1>,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
peteCast(const T1&, const clmulti_array<T2,3> & l)
{
  typedef UnaryNode<OpCast<T1>,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T2,3> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<UnaryNode<OpCast<T1>,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
peteCast(const T1&, const clmulti_array<T2,4> & l)
{
  typedef UnaryNode<OpCast<T1>,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T2,4> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,2> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,2> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,2> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,2> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,3> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,3> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,3> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,3> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,4> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,4> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,4> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,4> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,2> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,3> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,4> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator+(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator-(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator*(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator/(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator%(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator|(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator^(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
ldexp(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
pow(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
fmod(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
atan2(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<=(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>=(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator==(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator!=(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&&(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator||(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<<(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,1> & l,const T2 & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,2> & l,const T2 & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,3> & l,const T2 & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>>(const clmulti_array<T1,4> & l,const T2 & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator+(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator+(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator+(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator+(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator-(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator-(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator-(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator-(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator*(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator*(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator*(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator*(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator/(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator/(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator/(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator/(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator%(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator%(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator%(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator%(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator|(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator|(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator|(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator|(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator^(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator^(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator^(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator^(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
ldexp(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
ldexp(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
ldexp(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
ldexp(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
pow(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
pow(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
pow(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
pow(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
fmod(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
fmod(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
fmod(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
fmod(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
atan2(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
atan2(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
atan2(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
atan2(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<=(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<=(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<=(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<=(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>=(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>=(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>=(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>=(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator==(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator==(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator==(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator==(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator!=(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator!=(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator!=(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator!=(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator&&(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator&&(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator&&(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator&&(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator||(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator||(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator||(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator||(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}
#ifdef PETE_ALLOW_SCALAR_SHIFT

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator<<(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator<<(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator<<(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator<<(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> >::Expression_t
operator>>(const T1 & l,const clmulti_array<T2,1> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,1> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> >::Expression_t
operator>>(const T1 & l,const clmulti_array<T2,2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> >::Expression_t
operator>>(const T1 & l,const clmulti_array<T2,3> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,3> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> >::Expression_t
operator>>(const T1 & l,const clmulti_array<T2,4> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<clmulti_array<T2,4> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<clmulti_array<T2,4> >::make(r)));
}
#endif // PETE_ALLOW_SCALAR_SHIFT

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const clmulti_array<T1,1> & c,const T2 & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<clmulti_array<T1,1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const clmulti_array<T1,2> & c,const T2 & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<clmulti_array<T1,2> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,2> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const clmulti_array<T1,3> & c,const T2 & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<clmulti_array<T1,3> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,3> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const clmulti_array<T1,4> & c,const T2 & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<clmulti_array<T1,4> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<clmulti_array<T1,4> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<T3 >::make(f)));
}
#ifndef PETE_EXPRESSION_OPERATORS
#define PETE_EXPRESSION_OPERATORS

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcCos,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
acos(const Expression<T1> & l)
{
  typedef UnaryNode<FnArcCos,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcSin,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
asin(const Expression<T1> & l)
{
  typedef UnaryNode<FnArcSin,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcTan,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
atan(const Expression<T1> & l)
{
  typedef UnaryNode<FnArcTan,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCeil,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
ceil(const Expression<T1> & l)
{
  typedef UnaryNode<FnCeil,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCos,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
cos(const Expression<T1> & l)
{
  typedef UnaryNode<FnCos,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypCos,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
cosh(const Expression<T1> & l)
{
  typedef UnaryNode<FnHypCos,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnExp,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
exp(const Expression<T1> & l)
{
  typedef UnaryNode<FnExp,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFabs,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
fabs(const Expression<T1> & l)
{
  typedef UnaryNode<FnFabs,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFloor,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
floor(const Expression<T1> & l)
{
  typedef UnaryNode<FnFloor,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
log(const Expression<T1> & l)
{
  typedef UnaryNode<FnLog,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog10,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
log10(const Expression<T1> & l)
{
  typedef UnaryNode<FnLog10,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSin,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
sin(const Expression<T1> & l)
{
  typedef UnaryNode<FnSin,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypSin,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
sinh(const Expression<T1> & l)
{
  typedef UnaryNode<FnHypSin,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSqrt,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
sqrt(const Expression<T1> & l)
{
  typedef UnaryNode<FnSqrt,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnTan,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
tan(const Expression<T1> & l)
{
  typedef UnaryNode<FnTan,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypTan,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
tanh(const Expression<T1> & l)
{
  typedef UnaryNode<FnHypTan,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryMinus,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l)
{
  typedef UnaryNode<OpUnaryMinus,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryPlus,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l)
{
  typedef UnaryNode<OpUnaryPlus,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpBitwiseNot,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator~(const Expression<T1> & l)
{
  typedef UnaryNode<OpBitwiseNot,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpIdentity,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
PETE_identity(const Expression<T1> & l)
{
  typedef UnaryNode<OpIdentity,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpNot,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator!(const Expression<T1> & l)
{
  typedef UnaryNode<OpNot,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<UnaryNode<OpCast<T1>,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
peteCast(const T1&, const Expression<T2> & l)
{
  typedef UnaryNode<OpCast<T1>,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T2> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}
#ifdef PETE_ALLOW_SCALAR_SHIFT

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}
#endif // PETE_ALLOW_SCALAR_SHIFT

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const T2 & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<T3 >::make(f)));
}
#endif  // PETE_EXPRESSION_OPERATORS

template<class T1,class RHS>
inline
clmulti_array<T1,1>& assign(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& assign(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& assign(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& assign(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator+=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAddAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator+=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAddAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator+=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAddAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator+=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpAddAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator-=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpSubtractAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator-=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpSubtractAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator-=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpSubtractAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator-=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpSubtractAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator*=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpMultiplyAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator*=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpMultiplyAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator*=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpMultiplyAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator*=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpMultiplyAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator/=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpDivideAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator/=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpDivideAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator/=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpDivideAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator/=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpDivideAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator%=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpModAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator%=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpModAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator%=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpModAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator%=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpModAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator|=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseOrAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator|=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseOrAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator|=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseOrAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator|=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseOrAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator&=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseAndAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator&=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseAndAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator&=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseAndAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator&=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseAndAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator^=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseXorAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator^=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseXorAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator^=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseXorAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator^=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpBitwiseXorAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator<<=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpLeftShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator<<=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpLeftShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator<<=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpLeftShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator<<=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpLeftShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,1>& operator>>=(clmulti_array<T1,1>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpRightShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,2>& operator>>=(clmulti_array<T1,2>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpRightShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,3>& operator>>=(clmulti_array<T1,3>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpRightShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

template<class T1,class RHS>
inline
clmulti_array<T1,4>& operator>>=(clmulti_array<T1,4>& lhs,const RHS& rhs)
{
  typedef typename CreateLeaf<RHS>::Leaf_t Leaf_t;
  evaluate(lhs,OpRightShiftAssign(),MakeReturn<Leaf_t>::make(CreateLeaf<RHS>::make(rhs)));
  return lhs;
}

#endif // _CLMULTI_ARRAY_OPERATORS_H

